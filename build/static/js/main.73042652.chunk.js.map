{"version":3,"sources":["components/FeedbackOptions.jsx","components/Section.jsx","components/Statistics.jsx","components/Notification.jsx","App.js","index.js"],"names":["FeedbackOptions","handleOnClick","map","button","type","name","onClick","e","Section","title","children","Statistics","bad","good","neutral","positivePercentage","total","Notification","message","App","state","addFeedback","target","count","setState","calcStatistics","this","Math","round","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAkCeA,EA/BS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEzB,OACE,mCAFc,CAAC,OAAQ,UAAW,OAGvBC,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAAS,SAAAC,GACPN,EAAcM,IALlB,SAQGJ,GANIA,SCIAK,EAXC,SAAC,GAAD,QAAGC,aAAH,MAAW,GAAX,EAAeC,EAAf,EAAeA,SAAf,OACd,oCACGD,GAAS,iCAASA,IAClBC,MCMUC,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,mBAAoBC,EAA3C,EAA2CA,MAA3C,OACjB,qCACE,uCAAUH,KACV,0CAAaC,KACb,sCAASF,KACT,wCAAWI,KACX,oDAAuBD,EAAvB,WCCWE,EANM,SAAC,GAAD,QAAGC,eAAH,MAAa,GAAb,SAAsB,4BAAIA,KCGzCC,E,4MACJC,MAAQ,CACNP,KAAM,EACNC,QAAS,EACTF,IAAK,EACLI,MAAO,EACPD,mBAAoB,G,EAGtBM,YAAc,SAAAd,GACZ,IAAMH,EAAOG,EAAEe,OAAOjB,KAChBkB,EAAQ,EAAKH,MAAMhB,GACzB,EAAKoB,SAAL,eAAiBpB,EAAOmB,EAAQ,IAAK,kBAAM,EAAKE,qB,oDAGlD,WACE,MAA+BC,KAAKN,MAA5BR,EAAR,EAAQA,IAAKC,EAAb,EAAaA,KACPG,EAAQJ,EAAMC,EADpB,EAAmBC,QAEbC,EAAqBY,KAAKC,MAAOf,EAAOG,EAAS,KACvDU,KAAKF,SAAS,CAAER,QAAOD,yB,oBAGzB,WACE,MAA0DW,KAAKN,MAAvDR,EAAR,EAAQA,IAAKC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,mBAAoBC,EAAhD,EAAgDA,MAChD,OACE,qCACE,cAAC,EAAD,CAASP,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBR,cAAeyB,KAAKL,gBAEvC,cAAC,EAAD,CAASZ,MAAM,aAAf,SACIO,EAGA,cAAC,EAAD,CACEJ,IAAKA,EACLC,KAAMA,EACNC,QAASA,EACTC,mBAAoBA,EACpBC,MAAOA,IAPT,cAAC,EAAD,CAAcE,QAAQ,+B,GA/BhBW,aA+CHV,IChDfW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.73042652.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ handleOnClick }) => {\n  const buttons = ['good', 'neutral', 'bad'];\n  return (\n    <>\n      {buttons.map(button => (\n        <button\n          type=\"button\"\n          key={button}\n          name={button}\n          onClick={e => {\n            handleOnClick(e);\n          }}\n        >\n          {button}\n        </button>\n      ))}\n    </>\n  );\n};\nFeedbackOptions.propTypes = {\n  buttons: PropTypes.arrayOf(\n    PropTypes.shape({\n      good: PropTypes.string.isRequired,\n      neutral: PropTypes.string.isRequired,\n      bad: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n\n  handleOnClick: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title = '', children }) => (\n  <section>\n    {title && <header>{title}</header>}\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import React from 'react';\n\nconst Statistics = ({ bad, good, neutral, positivePercentage, total }) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage}%</p>\n  </>\n);\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message = '' }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions.jsx';\nimport Section from './components/Section.jsx';\nimport Statistics from './components/Statistics.jsx';\nimport Notification from './components/Notification.jsx';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positivePercentage: 0,\n  };\n\n  addFeedback = e => {\n    const type = e.target.name;\n    const count = this.state[type];\n    this.setState({ [type]: count + 1 }, () => this.calcStatistics());\n  };\n\n  calcStatistics() {\n    const { bad, good, neutral } = this.state;\n    const total = bad + good + neutral;\n    const positivePercentage = Math.round((good / total) * 100);\n    this.setState({ total, positivePercentage });\n  }\n\n  render() {\n    const { bad, good, neutral, positivePercentage, total } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions handleOnClick={this.addFeedback}></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {!total ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              bad={bad}\n              good={good}\n              neutral={neutral}\n              positivePercentage={positivePercentage}\n              total={total}\n            ></Statistics>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}