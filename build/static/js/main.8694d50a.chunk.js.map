{"version":3,"sources":["components/FeedbackOptions.jsx","components/Section.jsx","components/Statistics.jsx","components/Notification.jsx","App.js","index.js"],"names":["FeedbackOptions","handleOnClick","map","button","type","name","onClick","e","Section","title","children","Statistics","bad","good","neutral","positivePercentage","total","Notification","message","App","useState","setGood","setNeutral","setBad","setTotal","setPositivePercentage","useEffect","Math","round","typeButton","prevGood","prevNeutral","prevBad","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAkCeA,EA/BS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEzB,OACE,mCAFc,CAAC,OAAQ,UAAW,OAGvBC,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,KAAMF,EACNG,QAAS,SAAAC,GACPN,EAAcE,IALlB,SAQGA,GANIA,SCIAK,EAXC,SAAC,GAAD,QAAGC,aAAH,MAAW,GAAX,EAAeC,EAAf,EAAeA,SAAf,OACd,oCACGD,GAAS,iCAASA,IAClBC,MCMUC,EAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,mBAAoBC,EAA3C,EAA2CA,MAA3C,OACjB,qCACE,uCAAUH,KACV,0CAAaC,KACb,sCAASF,KACT,wCAAWI,KACX,oDAAuBD,EAAvB,WCCWE,EANM,SAAC,GAAD,QAAGC,eAAH,MAAa,GAAb,SAAsB,4BAAIA,KCgEhCC,MA7Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAON,EAAP,KAAgBQ,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAwBA,EAA0BH,mBAAS,GAAnC,mBAAOJ,EAAP,KAAcQ,EAAd,KACA,EAAoDJ,mBAAS,GAA7D,mBAAOL,EAAP,KAA2BU,EAA3B,KAWA,OATAC,qBAEA,WACE,IAAMV,EAAQJ,EAAMC,EAAOC,EAC3BU,EAASR,GACT,IAAMD,EAAqBY,KAAKC,MAAOf,EAAOG,EAAS,KACvDS,EAAsBV,KANE,CAACF,EAAMC,EAASF,IAUxC,qCACE,cAAC,EAAD,CAASH,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBR,cArCH,SAAA4B,GAClB,OAAQA,GACN,IAAK,OACHR,GAAQ,SAAAS,GAAQ,OAAIA,EAAW,KAE/B,MAEF,IAAK,UACHR,GAAW,SAAAS,GAAW,OAAIA,EAAc,KAExC,MAEF,IAAK,MACHR,GAAO,SAAAS,GAAO,OAAIA,EAAU,KAE5B,MAEF,QACEC,QAAQC,IAAR,+CAAsBL,EAAtB,6GAqBF,cAAC,EAAD,CAASpB,MAAM,aAAf,SACIO,EAGA,cAAC,EAAD,CACEJ,IAAKA,EACLC,KAAMA,EACNC,QAASA,EACTC,mBAAoBA,EACpBC,MAAOA,IAPT,cAAC,EAAD,CAAcE,QAAQ,4BC/ChCiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8694d50a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ handleOnClick }) => {\n  const buttons = ['good', 'neutral', 'bad'];\n  return (\n    <>\n      {buttons.map(button => (\n        <button\n          type=\"button\"\n          key={button}\n          name={button}\n          onClick={e => {\n            handleOnClick(button);\n          }}\n        >\n          {button}\n        </button>\n      ))}\n    </>\n  );\n};\nFeedbackOptions.propTypes = {\n  buttons: PropTypes.arrayOf(\n    PropTypes.shape({\n      good: PropTypes.string.isRequired,\n      neutral: PropTypes.string.isRequired,\n      bad: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n\n  handleOnClick: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title = '', children }) => (\n  <section>\n    {title && <header>{title}</header>}\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import React from 'react';\n\nconst Statistics = ({ bad, good, neutral, positivePercentage, total }) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage}%</p>\n  </>\n);\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message = '' }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions.jsx';\nimport Section from './components/Section.jsx';\nimport Statistics from './components/Statistics.jsx';\nimport Notification from './components/Notification.jsx';\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const addFeedback = typeButton => {\n    switch (typeButton) {\n      case 'good':\n        setGood(prevGood => prevGood + 1);\n\n        break;\n\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n\n        break;\n\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n\n        break;\n\n      default:\n        console.log(`кнопка ${typeButton} не обрабатывается`);\n    }\n  };\n\n  const [total, setTotal] = useState(0);\n  const [positivePercentage, setPositivePercentage] = useState(0);\n\n  useEffect(calcStatistics, [good, neutral, bad]);\n\n  function calcStatistics() {\n    const total = bad + good + neutral;\n    setTotal(total);\n    const positivePercentage = Math.round((good / total) * 100);\n    setPositivePercentage(positivePercentage);\n  }\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions handleOnClick={addFeedback}></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        {!total ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            bad={bad}\n            good={good}\n            neutral={neutral}\n            positivePercentage={positivePercentage}\n            total={total}\n          ></Statistics>\n        )}\n      </Section>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}